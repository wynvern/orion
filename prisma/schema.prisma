// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserStatus {
    Online
    Offline
    Away
    NotDisturb
}

model User {
    id            String     @id @default(uuid())
    username      String     @unique
    email         String     @unique
    fullName      String?
    biography     String?
    location      String?
    birthDate     DateTime?
    status        UserStatus @default(Online)
    password      String
    createdAt     DateTime   @default(now())
    emailVerified Boolean    @default(false)

    posts         Post[]
    comments      Comment[]
    followers     Follower[]      @relation("UserFollowers")
    following     Follower[]      @relation("UserFollowing")
    PostLikes     PostLikes[]
    PostBookmarks PostBookmarks[]
}

model PostLikes {
    id        String   @id @default(uuid())
    userId    String
    postId    String
    createdAt DateTime @default(now())

    user User @relation(fields: [userId], references: [id])
    post Post @relation(fields: [postId], references: [id])

    @@unique([userId, postId])
}

model PostBookmarks {
    id        String   @id @default(uuid())
    userId    String
    postId    String
    createdAt DateTime @default(now())

    user User @relation(fields: [userId], references: [id])
    post Post @relation(fields: [postId], references: [id])

    @@unique([userId, postId])
}

model Post {
    id        String          @id @default(uuid())
    content   String
    createdAt DateTime        @default(now())
    updatedAt DateTime        @updatedAt
    userId    String
    user      User            @relation(fields: [userId], references: [id])
    comments  Comment[]
    images    Int             @default(0)
    videos    Int             @default(0)
    likes     PostLikes[]
    bookmarks PostBookmarks[]
}

model Comment {
    id        String   @id @default(uuid())
    content   String   @db.VarChar(200)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String
    postId    String
    parentId  String?

    user    User      @relation(fields: [userId], references: [id])
    post    Post      @relation(fields: [postId], references: [id])
    parent  Comment?  @relation("ParentComment", fields: [parentId], references: [id])
    replies Comment[] @relation("ParentComment")
}

model Follower {
    id          String   @id @default(uuid())
    followerId  String
    followingId String
    createdAt   DateTime @default(now())

    follower  User @relation(fields: [followerId], references: [id], name: "UserFollowers")
    following User @relation(fields: [followingId], references: [id], name: "UserFollowing")

    @@unique([followerId, followingId])
}
